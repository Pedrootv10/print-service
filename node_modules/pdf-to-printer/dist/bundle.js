!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(global,(function(){return(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{getDefaultPrinter:()=>m,getPrinters:()=>h,print:()=>p});const n=require("path");var r=e.n(n);const o=require("fs");var i=e.n(o);function a(e){return String(e).match(/\\?.|^$/g).reduce(((e,t)=>('"'===t?e.quote^=1:e.quote||" "!==t?e.a[e.a.length-1]+=t.replace(/\\(.)/,"$1"):e.a.push(""),e)),{a:[""]}).a}const c=require("child_process"),u=require("util"),s=e.n(u)().promisify(c.execFile),f="electron"in process.versions&&process.mainModule&&process.mainModule.filename.includes("app.asar");const l=["-print-to","-print-to-default","-print-dialog"];function p(e,t={}){return n=this,o=void 0,u=function*(){if(!e)throw"No PDF specified";if("string"!=typeof e)throw"Invalid PDF name";if(!i().existsSync(e))throw"No such file";let n=t.sumatraPdfPath||r().join(__dirname,"SumatraPDF.exe");var o;t.sumatraPdfPath||(o=n,n=f?o.replace("app.asar","app.asar.unpacked"):o);const c=[],{printer:u,win32:p}=t;if(p){if(!Array.isArray(p))throw"options.win32 should be an array";p.map(a).reduce(((e,t)=>e.concat(t)),[]).forEach((e=>c.push(e)))}let d=!1;c.some((e=>!!(l.indexOf(e)>-1)&&(d=!0,!0))),d||(u?c.push("-print-to",u):c.push("-print-to-default"),c.push("-silent")),c.push(e);try{yield s(n,c)}catch(e){throw e}},new((c=void 0)||(c=Promise))((function(e,t){function r(e){try{a(u.next(e))}catch(e){t(e)}}function i(e){try{a(u.throw(e))}catch(e){t(e)}}function a(t){var n;t.done?e(t.value):(n=t.value,n instanceof c?n:new c((function(e){e(n)}))).then(r,i)}a((u=u.apply(n,o||[])).next())}));var n,o,c,u}function d(e){const t={deviceId:"",name:""};return{isValid:e.split(/\r?\n/).some((e=>{const[n,r]=e.split(":").map((e=>e.trim())),o=n.toLowerCase();return"deviceid"===o&&(t.deviceId=r),"name"===o&&(t.name=r),!(!t.deviceId||!t.name)})),printerData:t}}const h=function(){return e=this,t=void 0,r=function*(){try{const{stdout:e}=yield s("Powershell.exe",["-Command","Get-CimInstance Win32_Printer -Property DeviceID,Name"]);return function(e){const t=[];return e.split(/(\r?\n){2,}/).map((e=>e.trim())).filter((e=>!!e)).forEach((e=>{const{isValid:n,printerData:r}=d(e);n&&t.push(r)})),t}(e)}catch(e){throw e}},new((n=void 0)||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function c(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r};const m=function(){return e=this,t=void 0,r=function*(){try{const{stdout:e}=yield s("Powershell.exe",["-Command","Get-CimInstance Win32_Printer -Property DeviceID,Name -Filter Default=true"]),t=e.trim();if(!e)return null;const{isValid:n,printerData:r}=d(t);return n?r:null}catch(e){throw e}},new((n=void 0)||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function c(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r},v=require("os");if("win32"!==e.n(v)().platform())throw new Error("Platform not supported");return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,